#!/gpfsm/dulocal/sles11/other/SLES11.3/miniconda3/2019.03_py3.7/2019-05-15/bin/python

import os
import numpy as np

# Open the files and read values for the spgp files.
with open('lag.txt', 'r') as lag_file:
    lag = int(np.genfromtxt(lag_file))
with open('num_dry_parameters.txt', 'r') as dry_param_file:
    dry_param = int(np.genfromtxt(dry_param_file))
with open('num_dry_prediction_points.txt', 'r') as dry_pred_file:
    dry_pred = int(np.genfromtxt(dry_pred_file))
with open('num_dry_training_points.txt', 'r') as dry_train_file:
    dry_train = int(np.genfromtxt(dry_train_file))
with open('num_wet_parameters.txt', 'r') as wet_param_file:
    wet_param = int(np.genfromtxt(wet_param_file))
with open('num_wet_prediction_points.txt', 'r') as wet_pred_file:
    wet_pred = int(np.genfromtxt(wet_pred_file))
with open('num_wet_training_points.txt', 'r') as wet_train_file:
    wet_train = int(np.genfromtxt(wet_train_file))

with open('run_spgp_wet.sh', 'w+') as spgp_file:
    spgp_file.write('#!/bin/bash -x')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --job-name="spgp-2-2000-dry"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --account=s2027')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --time=12:00:00')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --constraint=hasw')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --output="slurm_dry_output_%j.out"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --error="slurm_dry_error_%j.out"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --ntasks=1')
    spgp_file.write('\n')
    spgp_file.write('#unlimited stack size') 
    spgp_file.write('\n')
    spgp_file.write('#--- often important for Fortan users who allocate primarily on the stack (not the heap)')
    spgp_file.write('\n')
    spgp_file.write('limit stacksize unlimited')
    spgp_file.write('\n')
    spgp_file.write('#1. source correct environment for modules using bash')
    spgp_file.write('\n')
    spgp_file.write('source /usr/share/modules/init/bash')
    spgp_file.write('\n')
    spgp_file.write('#2. Remove all modules that might be loaded')
    spgp_file.write('\n')
    spgp_file.write('module purge')
    spgp_file.write('\n')
    spgp_file.write('#3. Load the modules you would like.')
    spgp_file.write('\n')
    spgp_file.write('source /discover/nobackup/jframe/p05noahgpr/blodget_oneYearCal/soil_moisture/gpr/configure')
    spgp_file.write('\n')
    spgp_file.write('#4. Add any other commands to set up the runtime environment for your job.')
    spgp_file.write('\n')
    spgp_file.write('dim='+str(dry_param))
    spgp_file.write('\n')
    spgp_file.write('n='+str(dry_train))
    spgp_file.write('\n')
    spgp_file.write('l="dry"')
    spgp_file.write('\n')
    spgp_file.write('np=1')
    spgp_file.write('\n')
    spgp_file.write('ns=15')
    spgp_file.write('\n')
    spgp_file.write('mpirun -n ${np} ./examples/train_gpr_sample <<EOF 2>&1 | tee ${ns}_${l}_output.log')
    spgp_file.write('\n')
    spgp_file.write('gpr_state_filename       ${l}_gpr.dat')
    spgp_file.write('\n')
    spgp_file.write('number_of_inputs         ${n}')
    spgp_file.write('\n')
    spgp_file.write('number_of_parameters     ${dim}')
    spgp_file.write('\n')
    spgp_file.write('number_pseudo_inputs     ${ns}')
    spgp_file.write('\n')
    spgp_file.write('input_filename           ${l}_train_inputs.bin')
    spgp_file.write('\n')
    spgp_file.write('target_filename          ${l}_train_targets.bin')
    spgp_file.write('\n')
    spgp_file.write('kernel_type              ARD_with_noise')
    spgp_file.write('\n')
    spgp_file.write('approx_type              spgp')
    spgp_file.write('\n')
    spgp_file.write('max_number_of_iterations 50000')
    spgp_file.write('\n')
    spgp_file.write('stepsize                 0.005')
    spgp_file.write('\n')
    spgp_file.write('line_search_tolerance    0.001')
    spgp_file.write('\n')
    spgp_file.write('gradient_tolerance       1e-5')
    spgp_file.write('\n')
    spgp_file.write('signal_to_noise          1e5')
    spgp_file.write('\n')
    spgp_file.write('signal_to_kernel         1e8')
    spgp_file.write('\n')
    spgp_file.write('max_time                 5000')
    spgp_file.write('\n')
    spgp_file.write('isRead                   0')
    spgp_file.write('\n')
    spgp_file.write('EOF')

################################################################################################
#####################################   Create the scripy for Wet period    ####################
################################################################################################

with open('run_spgp_wet.sh', 'w+') as spgp_file:
    spgp_file.write('#!/bin/bash -x')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --job-name="spgp-2-2000-wet"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --account=s2027')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --time=12:00:00')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --constraint=hasw')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --output="slurm_wet_output_%j.out"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --error="slurm_wet_error_%j.out"')
    spgp_file.write('\n')
    spgp_file.write('#SBATCH --ntasks=1')
    spgp_file.write('\n')
    spgp_file.write('#unlimited stack size') 
    spgp_file.write('\n')
    spgp_file.write('#--- often important for Fortan users who allocate primarily on the stack (not the heap)')
    spgp_file.write('\n')
    spgp_file.write('limit stacksize unlimited')
    spgp_file.write('\n')
    spgp_file.write('#1. source correct environment for modules using bash')
    spgp_file.write('\n')
    spgp_file.write('source /usr/share/modules/init/bash')
    spgp_file.write('\n')
    spgp_file.write('#2. Remove all modules that might be loaded')
    spgp_file.write('\n')
    spgp_file.write('module purge')
    spgp_file.write('\n')
    spgp_file.write('#3. Load the modules you would like.')
    spgp_file.write('\n')
    spgp_file.write('source /discover/nobackup/jframe/p05noahgpr/blodget_oneYearCal/soil_moisture/gpr/configure')
    spgp_file.write('\n')
    spgp_file.write('#4. Add any other commands to set up the runtime environment for your job.')
    spgp_file.write('\n')
    spgp_file.write('dim='+str(wet_param))
    spgp_file.write('\n')
    spgp_file.write('n='+str(wet_train))
    spgp_file.write('\n')
    spgp_file.write('l="wet"')
    spgp_file.write('\n')
    spgp_file.write('np=1')
    spgp_file.write('\n')
    spgp_file.write('ns=15')
    spgp_file.write('\n')
    spgp_file.write('mpirun -n ${np} ./examples/train_gpr_sample <<EOF 2>&1 | tee ${ns}_${l}_output.log')
    spgp_file.write('\n')
    spgp_file.write('gpr_state_filename       ${l}_gpr.dat')
    spgp_file.write('\n')
    spgp_file.write('number_of_inputs         ${n}')
    spgp_file.write('\n')
    spgp_file.write('number_of_parameters     ${dim}')
    spgp_file.write('\n')
    spgp_file.write('number_pseudo_inputs     ${ns}')
    spgp_file.write('\n')
    spgp_file.write('input_filename           ${l}_train_inputs.bin')
    spgp_file.write('\n')
    spgp_file.write('target_filename          ${l}_train_targets.bin')
    spgp_file.write('\n')
    spgp_file.write('kernel_type              ARD_with_noise')
    spgp_file.write('\n')
    spgp_file.write('approx_type              spgp')
    spgp_file.write('\n')
    spgp_file.write('max_number_of_iterations 50000')
    spgp_file.write('\n')
    spgp_file.write('stepsize                 0.005')
    spgp_file.write('\n')
    spgp_file.write('line_search_tolerance    0.001')
    spgp_file.write('\n')
    spgp_file.write('gradient_tolerance       1e-5')
    spgp_file.write('\n')
    spgp_file.write('signal_to_noise          1e5')
    spgp_file.write('\n')
    spgp_file.write('signal_to_kernel         1e8')
    spgp_file.write('\n')
    spgp_file.write('max_time                 5000')
    spgp_file.write('\n')
    spgp_file.write('isRead                   0')
    spgp_file.write('\n')
    spgp_file.write('EOF')
    spgp_file.write('\n')


################################################################################################
#####################   Create the scripy for Wet and Dry predictions    i######################
################################################################################################
with open('spgp_predictions.sh', 'w+') as spgp_file:
    spgp_file.write('mpirun -n 1 ./examples/make_predictions_sample <<EOF 2>&1 | tee output.log')
    spgp_file.write('\n')
    spgp_file.write('gpr_state_filename  dry_gpr.dat')
    spgp_file.write('\n')
    spgp_file.write('number_of_inputs  '+str(dry_pred))
    spgp_file.write('\n')
    spgp_file.write('input_filename dry_predict_inputs.bin')
    spgp_file.write('\n')
    spgp_file.write('predictions_filename dry_predictions.bin')
    spgp_file.write('\n')
    spgp_file.write('target_covariance_filename  covariance_filename')
    spgp_file.write('\n')
    spgp_file.write('isCovariance 0')
    spgp_file.write('\n')
    spgp_file.write('EOF')
    spgp_file.write('\n')
    spgp_file.write('mpirun -n 1 ./examples/make_predictions_sample <<EOF 2>&1 | tee output.log')
    spgp_file.write('\n')
    spgp_file.write('gpr_state_filename  dry_gpr.dat')
    spgp_file.write('\n')
    spgp_file.write('number_of_inputs  '+str(wet_pred))
    spgp_file.write('\n')
    spgp_file.write('input_filename dry_predict_inputs.bin')
    spgp_file.write('\n')
    spgp_file.write('predictions_filename dry_predictions.bin')
    spgp_file.write('\n')
    spgp_file.write('target_covariance_filename  covariance_filename')
    spgp_file.write('\n')
    spgp_file.write('isCovariance 0')
    spgp_file.write('\n')
    spgp_file.write('EOF')
###################################################################################
